import { useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import { motion } from "framer-motion";
import styles from "./MarkDownPage.module.css";

const generateDummyMarkdown = (data, compliance) => {
  return `# Test Case Report

**Compliance:** ${compliance || "N/A"}

## Uploaded Requirements

${data.map((req, idx) => `- Requirement ${idx + 1}: ${req}`).join("\n")}

## Test Cases

${data.map((req, idx) => `- Test Case ${idx + 1} for Requirement ${idx + 1}`).join("\n")}

---

*Generated by TestGenAI*`;
};

export default function MarkdownPage() {
  const location = useLocation();
  const navigate = useNavigate();
  const { requirements, compliance } = location.state || {
    requirements: [],
    compliance: "N/A",
  };

  const markdown = generateDummyMarkdown(requirements, compliance);

  const [showYesNo, setShowYesNo] = useState(true);
  const [showFormatSelect, setShowFormatSelect] = useState(false);
  const [selectedFormats, setSelectedFormats] = useState([]);
  
  const fileFormats = ["XML", "Word", "PDF", "Markup"];

  const handleYesClick = () => {
    setShowYesNo(false);
    setShowFormatSelect(true);
  };

  const handleNoClick = () => {
    // setShowYesNo(false);
    // Nothing else happens
  };

  const handleFormatToggle = (format) => {
    if (selectedFormats.includes(format)) {
      setSelectedFormats(selectedFormats.filter(f => f !== format));
    } else {
      setSelectedFormats([...selectedFormats, format]);
    }
  };

  const handleGenerateFiles = () => {
    // For now, just redirect to dummy generated files page
    navigate("/generated-files", { state: { formats: selectedFormats } });
  };

  return (
    <div className={styles.page}>
      <motion.h1
        className={styles.title}
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
      >
        Generated Markdown Report
      </motion.h1>

      <motion.pre
        className={styles.markdownBox}
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5 }}
      >
        {markdown}
      </motion.pre>

      {/* Yes/No buttons */}
      {showYesNo && (
        <motion.div
          className={styles.yesNoContainer}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
        >
          <button className={styles.yesBtn} onClick={handleYesClick}>Yes</button>
          <button className={styles.noBtn} onClick={handleNoClick}>No</button>
        </motion.div>
      )}

      {/* Format selection */}
      {showFormatSelect && (
        <motion.div
          className={styles.formatContainer}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
        >
          <h3>Select File Formats:</h3>
          <div className={styles.formatButtons}>
            {fileFormats.map((format) => (
              <button
                key={format}
                className={`${styles.formatBtn} ${selectedFormats.includes(format) ? styles.selected : ""}`}
                onClick={() => handleFormatToggle(format)}
              >
                {format}
              </button>
            ))}
          </div>

          {selectedFormats.length > 0 && (
            <button className={styles.generateBtn} onClick={handleGenerateFiles}>
              Generate Files
            </button>
          )}
        </motion.div>
      )}
    </div>
  );
}
